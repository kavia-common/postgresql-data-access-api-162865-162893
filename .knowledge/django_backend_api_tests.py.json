{"is_source_file": true, "format": "Python", "description": "This file contains Django Rest Framework API test cases for application endpoints including /api/health/ and /api/records/. It includes setup of test data, validation of response status and data content, and mocking database errors.", "external_files": ["django.urls", "django.utils.dateparse", "rest_framework.test", "unittest.mock", ".models"], "external_methods": ["reverse", "parse_datetime", "APITestCase", "patch"], "published": ["HealthTests", "RecordsAPITests"], "classes": [{"name": "HealthTests", "description": "Test cases for the /api/health/ endpoint."}, {"name": "RecordsAPITests", "description": "Test cases for the /api/records/ endpoint."}], "methods": [{"name": "test_health_ok_and_json(self)", "description": "Verifies that the health endpoint returns a 200 status and JSON message indicating server is up.", "scope": "HealthTests", "scopeKind": "class"}, {"name": "setUp(self)", "description": "Sets up test data with three Record instances for testing list retrieval.", "scope": "RecordsAPITests", "scopeKind": "class"}, {"name": "test_list_records_returns_all_rows_and_fields(self)", "description": "Checks that the endpoint returns all records with correct fields and types.", "scope": "RecordsAPITests", "scopeKind": "class"}, {"name": "test_list_records_sorted_by_id(self)", "description": "Ensures records are returned ordered by ID in ascending order.", "scope": "RecordsAPITests", "scopeKind": "class"}, {"name": "test_list_records_empty(self)", "description": "Verifies that an empty list is returned when no records exist.", "scope": "RecordsAPITests", "scopeKind": "class"}, {"name": "test_created_at_is_readonly_effectively(self)", "description": "Ensures 'created_at' field exists and timestamps are properly formatted.", "scope": "RecordsAPITests", "scopeKind": "class"}, {"name": "test_error_handling_returns_500_with_detail(self)", "description": "Simulates a database error and checks that API returns 500 with error details.", "scope": "RecordsAPITests", "scopeKind": "class"}], "calls": ["reverse(\"Health\")", "response = self.client.get(url)", "self.assertEqual(...)", "self.assertIn(...)", "parse_datetime(...)", "Record.objects.create(...)", "Record.objects.all().delete()", "patch(\"api.views.Record.objects\")"], "search-terms": ["HealthTests", "RecordsAPITests", "test_health_ok_and_json", "test_list_records_returns_all_rows_and_fields", "test_error_handling_returns_500_with_detail"], "state": 2, "file_id": 17, "knowledge_revision": 51, "git_revision": "1d9ed962409702aadbfbd40c55a7689898206314", "revision_history": [{"37": "85b16ae556b4eb32ef5e09d1c2a439d70ffba847"}, {"49": "42870828737a51a69d97cc4392ab88f401498dcd"}, {"51": "1d9ed962409702aadbfbd40c55a7689898206314"}], "ctags": [{"_type": "tag", "name": "HealthTests", "path": "/home/kavia/workspace/code-generation/postgresql-data-access-api-162865-162893/django_backend/api/tests.py", "pattern": "/^class HealthTests(APITestCase):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "RecordsAPITests", "path": "/home/kavia/workspace/code-generation/postgresql-data-access-api-162865-162893/django_backend/api/tests.py", "pattern": "/^class RecordsAPITests(APITestCase):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "setUp", "path": "/home/kavia/workspace/code-generation/postgresql-data-access-api-162865-162893/django_backend/api/tests.py", "pattern": "/^    def setUp(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RecordsAPITests", "scopeKind": "class"}, {"_type": "tag", "name": "test_created_at_is_readonly_effectively", "path": "/home/kavia/workspace/code-generation/postgresql-data-access-api-162865-162893/django_backend/api/tests.py", "pattern": "/^    def test_created_at_is_readonly_effectively(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RecordsAPITests", "scopeKind": "class"}, {"_type": "tag", "name": "test_error_handling_returns_500_with_detail", "path": "/home/kavia/workspace/code-generation/postgresql-data-access-api-162865-162893/django_backend/api/tests.py", "pattern": "/^    def test_error_handling_returns_500_with_detail(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RecordsAPITests", "scopeKind": "class"}, {"_type": "tag", "name": "test_health_ok_and_json", "path": "/home/kavia/workspace/code-generation/postgresql-data-access-api-162865-162893/django_backend/api/tests.py", "pattern": "/^    def test_health_ok_and_json(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "HealthTests", "scopeKind": "class"}, {"_type": "tag", "name": "test_list_records_empty", "path": "/home/kavia/workspace/code-generation/postgresql-data-access-api-162865-162893/django_backend/api/tests.py", "pattern": "/^    def test_list_records_empty(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RecordsAPITests", "scopeKind": "class"}, {"_type": "tag", "name": "test_list_records_returns_all_rows_and_fields", "path": "/home/kavia/workspace/code-generation/postgresql-data-access-api-162865-162893/django_backend/api/tests.py", "pattern": "/^    def test_list_records_returns_all_rows_and_fields(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RecordsAPITests", "scopeKind": "class"}, {"_type": "tag", "name": "test_list_records_sorted_by_id", "path": "/home/kavia/workspace/code-generation/postgresql-data-access-api-162865-162893/django_backend/api/tests.py", "pattern": "/^    def test_list_records_sorted_by_id(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RecordsAPITests", "scopeKind": "class"}], "hash": "c3e0a868beb03cf1614d3ae02ed1e386", "format-version": 4, "code-base-name": "django_backend", "filename": "django_backend/api/tests.py"}